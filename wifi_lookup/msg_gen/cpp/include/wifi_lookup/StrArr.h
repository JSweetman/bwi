/* Auto-generated by genmsg_cpp for file /nishome/rlynch/ros/rosbuild_ws/class-code/wifi_lookup/msg/StrArr.msg */
#ifndef WIFI_LOOKUP_MESSAGE_STRARR_H
#define WIFI_LOOKUP_MESSAGE_STRARR_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace wifi_lookup
{
template <class ContainerAllocator>
struct StrArr_ {
  typedef StrArr_<ContainerAllocator> Type;

  StrArr_()
  : MAC()
  , dB()
  {
  }

  StrArr_(const ContainerAllocator& _alloc)
  : MAC(_alloc)
  , dB(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _MAC_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  MAC;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _dB_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  dB;


  typedef boost::shared_ptr< ::wifi_lookup::StrArr_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::wifi_lookup::StrArr_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct StrArr
typedef  ::wifi_lookup::StrArr_<std::allocator<void> > StrArr;

typedef boost::shared_ptr< ::wifi_lookup::StrArr> StrArrPtr;
typedef boost::shared_ptr< ::wifi_lookup::StrArr const> StrArrConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::wifi_lookup::StrArr_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::wifi_lookup::StrArr_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace wifi_lookup

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::wifi_lookup::StrArr_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::wifi_lookup::StrArr_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::wifi_lookup::StrArr_<ContainerAllocator> > {
  static const char* value() 
  {
    return "272f7b7c01e01fd743933e7ed3b41dad";
  }

  static const char* value(const  ::wifi_lookup::StrArr_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x272f7b7c01e01fd7ULL;
  static const uint64_t static_value2 = 0x43933e7ed3b41dadULL;
};

template<class ContainerAllocator>
struct DataType< ::wifi_lookup::StrArr_<ContainerAllocator> > {
  static const char* value() 
  {
    return "wifi_lookup/StrArr";
  }

  static const char* value(const  ::wifi_lookup::StrArr_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::wifi_lookup::StrArr_<ContainerAllocator> > {
  static const char* value() 
  {
    return "string MAC\n\
string dB\n\
\n\
";
  }

  static const char* value(const  ::wifi_lookup::StrArr_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::wifi_lookup::StrArr_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.MAC);
    stream.next(m.dB);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct StrArr_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::wifi_lookup::StrArr_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::wifi_lookup::StrArr_<ContainerAllocator> & v) 
  {
    s << indent << "MAC: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.MAC);
    s << indent << "dB: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.dB);
  }
};


} // namespace message_operations
} // namespace ros

#endif // WIFI_LOOKUP_MESSAGE_STRARR_H

